# Author: Abdur Rahim <rahim.prsf@gmail.com> 
#
# This GitHub action contains three Jobs
# 1. Build: This build the dotnet application
# 2. Deploy: If build is successfull then this logs into ECR first, then build builds the Docker image and finally uploads
#    the image into AWS ECR
# 3. Publish: This logs into the ECR and SSH to the EC2 instance. Then it pulls the Docker image from the ECR
#    Fianlly, stops previous container and runs the latest image

name: Build Docker image, publish to ECR and deploy to Amazon EC2

on:
  push:
    branches: ["docker-container"]

env:
  ECR_REPOSITORY: automate/api           # set this to your Amazon ECR repository name
  EC2_IP: ec2-43-204-145-191.ap-south-1.compute.amazonaws.com
  CONTAINER_NAME: automate-api

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest  
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK 8.0.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x 
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore

  publish:
    name: Build Docker image and push to ECR
    runs-on: ubuntu-latest
    needs: build
    outputs:
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
 
  deploy:
    name: Deploy docker image on AWS EC2
    environment: production
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Pull docker image and run container
        env:
          ECR_REGISTRY: ${{needs.publish.outputs.ECR_REGISTRY}}
          PRIVATE_KEY: ${{ secrets.SSH_KEY }}
        run: |
          echo "$PRIVATE_KEY" >> $HOME/key.pem
          chmod 400 $HOME/key.pem
          ssh -i $HOME/key.pem -o StrictHostKeyChecking=no -tt ec2-user@$EC2_IP
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin $ECR_REGISTRY
          sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY
          sudo docker stop $CONTAINER_NAME
          sudo docker rm $CONTAINER_NAME
          sudo docker run -d -p 80:80 --name $CONTAINER_NAME $ECR_REGISTRY/$ECR_REPOSITORY
          sudo docker image prune -a -f
