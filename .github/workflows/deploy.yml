# Author: Abdur Rahim <rahim.prsf@gmail.com> 
#
# This GitHub action contains three Jobs
# 1. Build: This build the dotnet application
# 2. Deploy: If build is successfull then this logs into ECR first, then build builds the Docker image and finally uploads
#    the image into AWS ECR
# 3. Publish: This logs into the ECR and SSH to the EC2 instance. Then it pulls the Docker image from the ECR
#    Fianlly, stops previous container and runs the latest image

name: ‚öôÔ∏è Build Docker image, üì¶ publish to ECR and, üöÄ deploy to Amazon EC2

on:
  push:
    branches: ["docker-container"]

env:
  ECR_REPOSITORY: automate/api     # set this to your Amazon ECR repository name
  HOST: ec2-43-204-145-191.ap-south-1.compute.amazonaws.com
  CONTAINER_NAME: automate-api

jobs:
  build:
    name: üõ† Build Project
    runs-on: ubuntu-latest  
    steps:
      - uses: actions/checkout@v3
      - name: 1Ô∏è‚É£ Setup .NET Core SDK 8.0.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x 
      - name: 2Ô∏è‚É£ Install dependencies
        run: dotnet restore
        
      - name: 3Ô∏è‚É£ Build
        run: dotnet build --configuration Release --no-restore


  publish:
    name: üì¶ Build Docker image and push to ECR
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: 1Ô∏è‚É£ Checkout
      uses: actions/checkout@v4
    - name: 2Ô∏è‚É£ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        mask-aws-account-id: 'false'
    - name: 3Ô∏è‚É£ Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'false'
    - name: 4Ô∏è‚É£ Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $REGISTRY/$ECR_REPOSITORY:latest .
        docker push $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/$ECR_REPOSITORY:latest
    - name: 5Ô∏è‚É£ Log out of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
 

  deploy:
    name: üöÄ Deploy docker image on AWS EC2
    environment: production
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: 1Ô∏è‚É£ SSH into EC2 instance
        uses: appleboy/ssh-action@v1.0.0
        env:
          INPUT_AWS_REGION: ${{ secrets.AWS_REGION }}
          INPUT_REGISTRY: ${{ needs.publish.outputs.registry }}
        with:
          host: ${{ env.HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          allenvs: true
          envs: INPUT_AWS_REGION,INPUT_REGISTRY            
      - name: 2Ô∏è‚É£ Deploy docker image
        run: |
          echo "Registry: $INPUT_REGISTRY"
          echo "Region: $INPUT_AWS_REGION"
          sudo docker login --username AWS -p $(aws ecr get-login-password --region $INPUT_AWS_REGION) $INPUT_REGISTRY
          sudo docker pull $IMAGE_NAME/$ECR_REPOSITORY:latest
          sudo docker stop $CONTAINER_NAME
          sudo docker rm $CONTAINER_NAME
          sudo docker run -d -p 80:8080 --name $CONTAINER_NAME $IMAGE_NAME/$ECR_REPOSITORY:latest
          sudo docker image prune -a -f
          sudo docker logout $INPUT_REGISTRY